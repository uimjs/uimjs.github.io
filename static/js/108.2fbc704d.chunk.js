(this.webpackJsonpwebsite=this.webpackJsonpwebsite||[]).push([[108],{1019:function(n,e,t){"use strict";t.r(e),e.default="SwipeAction \u6ed1\u52a8\u64cd\u4f5c\u7ec4\u4ef6\u3002\n---\n\n\u7ed3\u5408\u624b\u52bf\u64cd\u4f5c\uff0c\u4ece\u5c4f\u5e55\u4e00\u4fa7\u5524\u51fa\u64cd\u4f5c\u3002\n\n\n## \u57fa\u7840\u793a\u4f8b\n\n```jsx\nimport React, { Component } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SwipeAction } from '@uiw/react-native';\nimport Layout, { Container } from '../../Layout';\nimport { ComProps } from '../../routes';\n\nconst { Header, Body, Card, Footer } = Layout;\n\nexport interface SwipeActionProps extends ComProps {\n}\n\nexport default class SwipeActionView extends Component<SwipeActionProps> {\n  newRef: any;\n  render() {\n    const { route } = this.props;\n    const description = route.params.description;\n    const title = route.params.title;\n    const right = [\n      {\n        text: '\u67e5\u770b\u5907\u6ce8',\n        color: 'orange',\n        x: 250,\n        onPress: () => {\n          this.newRef?.swipeable?.close()\n        },\n      },\n      {\n        text: '\u5220\u9664',\n        color: 'red',\n        x: 400,\n        onPress: () => {\n          this.newRef?.swipeable?.close()\n        },\n      },\n      {\n        text: '\u4e0d\u663e\u793a',\n        color: 'green',\n        x: 400,\n        onPress: () => {\n          this.newRef?.swipeable?.close()\n        },\n      },\n    ];\n    const left = [\n      {\n        text: '\u5de6\u4fa7\u67e5\u770b',\n        color: 'pink',\n        onPress: () => {\n          this.newRef?.swipeable?.close()\n        },\n      },\n    ];\n    return (\n      <Container>\n        <Layout>\n          <Header title={title} description={description} />\n          <Body>\n            <Card title=\"\u5de6\u53f3\u6ed1\u52a8\uff0c\u663e\u793a\u6309\u94ae\" style={styles.card}>\n              <SwipeAction\n                ref={ref => this.newRef = ref}\n                right={right}\n                left={left}\n                onSwipeableRightOpen={() => console.log('right')}\n                onSwipeableLeftOpen={() => () => console.log('left')}\n              >\n                <View style={[styles.view]}>\n                  <Text>\u6ed1\u52a8</Text>\n                </View>\n              </SwipeAction>\n            </Card>\n          </Body>\n          <Footer />\n        </Layout>\n      </Container>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: '#fff',\n    paddingLeft: 20,\n    paddingRight: 20,\n    paddingBottom: 30,\n  },\n  view: {\n    height: 30\n  },\n});\n\n```\n\n\n## Props\n\u7ec4\u4ef6\u7ee7\u627freact-native-gesture-handler[`Swipeable`](https://docs.swmansion.com/react-native-gesture-handler/docs/api/components/swipeable)\n```tsx\nexport interface SwipeActionProps {\n  right: Array<{\n    text: string;\n    color: string;\n    x?: number;\n    onPress?: () => void\n  }>;\n  enableTrackpadTwoFingerGesture?: boolean;\n  friction?: number;\n  leftThreshold?: number;\n  rightThreshold?: number;\n  overshootLeft?: boolean;\n  overshootRight?: boolean;\n  overshootFriction?: number;\n  onSwipeableLeftOpen?: () => void;\n  onSwipeableRightOpen?: () => void;\n  onSwipeableOpen?: () => void;\n  onSwipeableClose?: () => void;\n  onSwipeableLeftWillOpen?: () => void;\n  onSwipeableRightWillOpen?: () => void;\n  onSwipeableWillOpen?: () => void;\n  onSwipeableWillClose?: () => void;\n  children?: React.ReactNode;\n  renderLeftActions?: (progressAnimatedValue: Animated.AnimatedInterpolation, dragAnimatedValue: Animated.AnimatedInterpolation) => React.ReactNode;\n  renderRightActions?: (progressAnimatedValue: Animated.AnimatedInterpolation, dragAnimatedValue: Animated.AnimatedInterpolation) => React.ReactNode;\n  useNativeAnimations?: boolean;\n  animationOptions?: Record<string, unknown>;\n  containerStyle?: StyleProp<ViewStyle>;\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n```"}}]);
//# sourceMappingURL=108.2fbc704d.chunk.js.map